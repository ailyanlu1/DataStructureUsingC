Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-02-21T09:15:23+08:00

====== Content ======
Created 星期三 21 二月 2018

===== 14.2 Linear Seach =====

Version1: 只返回特定值的第一个位置（如果存在的话）
{{{code: lang="c" linenumbers="True"
#include <stdio.h>

void readArr(int arr[], int n);
int findVal(int arr[], int n, int val);
void test();

int main(){
    test();
    return 0;
}


// find the first one
int findVal(int arr[], int n, int val){
    int find = -1;
    for (int i = 0; i < n; ++i) {
        if(arr[i] == val)
        {
            find = i;
            break;
        }
    }
    if(find == -1)
        printf("%d not in the array", val);
    return find;
}

void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}

void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    int val;
    printf("Enter the val to be searched: ");
    scanf("%d", &val);

    int result;
    result = findVal(arr, n, val);
    if (result != -1)
        printf("The pos of %d is %d", val, result);
}
}}}


Version2: 返回值的所有位置（如果存在）

注意：此处memset的用法要注意，总的来讲，要用sizeof来分配。参考[[https://stackoverflow.com/questions/7202411/why-does-memsetarr-1-sizeofarr-sizeofint-not-clear-an-integer-array-t|stackoverflow]]
{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#include <string.h>

void readArr(int arr[], int n);
void showPoses(int result[]);
int findVal(int arr[], int n, int val, int result[]);
void test();

int main(){
    test();
    return 0;
}


// find all the poses
int findVal(int arr[], int n, int val, int result[]){
    int j = 0;
    for (int i = 0; i < n; ++i) {
        if(arr[i] == val)
        {
            result[j] = i;
            j++;
        }
    }
    if(j == 0)
        printf("%d not in the array", val);
    return j;
}

void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}

void showPoses(int result[]){
    int i = 0;
    while (result[i] != -1)
    {
        printf("%d ", result[i]);
        i++;
    }
}

void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    int val;
    printf("Enter the val to be searched: ");
    scanf("%d", &val);

    int result[n];
    memset(result, -1, sizeof(result));  // or n*sizeof(int)
    int find;
    find = findVal(arr, n, val, result);
    if(find)
        showPoses(result);
}
}}}



===== 14.3 Binary Search(and Bubble sort) =====

{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#include <string.h>

void readArr(int arr[], int n);
void showArr(int arr[], int n);
void bubbleSort(int arr[], int n);
int binarySearch(int arr[], int beg, int end, int val);
void test();

int main(){
    test();
    return 0;
}

void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}

void showArr(int arr[], int n){
    for (int i = 0; i < n; ++i)
            printf("%d ", arr[i]);
    }


void bubbleSort(int arr[], int n){
    int swapped = 1, temp;
    while(swapped)
    {
        swapped = 0;
        for (int i = 0; i < n-1; ++i)
        {
            if(arr[i] > arr[i+1])
            {
                temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;
                swapped = 1;
            }
        }
        n--;
    }
}
int binarySearch(int arr[], int beg, int end, int val){
    int mid;
    if(end >= beg)
    {
        mid = (beg+end)/2;
        if(arr[mid] == val)
            return mid;
        else if(arr[mid] > val)
            return binarySearch(arr, beg, mid-1, val);
        else if(arr[mid] < val)
            return binarySearch(arr, mid+1, end, val);
    }
    // if the val not in arr
    printf("%d is bot in arr", val);
    return -1;

}

void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    bubbleSort(arr, n);
    printf("After sorting: ");
    showArr(arr, n);

    int val;
    printf("\nEnter the val to be searched: ");
    scanf("%d", &val);

    int result;
    result = binarySearch(arr, 0, n-1, val);
    if(result != -1)
        printf("The pos of %d is %d", val, result);
}
}}}


===== 14.4 INTERPOLATION SEARCH（can be seen as a variant of binary search） =====

注意：在使用递归函数进行查找时，注意限制val在arr[low]和arr[high]（sorted array）之内，否则会无限递归。
{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#include <string.h>

void readArr(int arr[], int n);
void showArr(int arr[], int n);
void bubbleSort(int arr[], int n);
int interpolation_search(int arr[], int low, int high, int val);
void test();

int main(){
    test();
    return 0;
}

void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}

void showArr(int arr[], int n){
    for (int i = 0; i < n; ++i)
            printf("%d ", arr[i]);
    }


void bubbleSort(int arr[], int n){
    int swapped = 1, temp;
    while(swapped)
    {
        swapped = 0;
        for (int i = 0; i < n-1; ++i)
        {
            if(arr[i] > arr[i+1])
            {
                temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;
                swapped = 1;
            }
        }
        n--;
    }
}

// by while loop
int interpolation_search(int arr[], int low, int high, int val) {
    int mid;
    while (low <= high) {
        mid = low + (high - low) * (val - arr[low]) / (arr[high] - arr[low]);
        if (val == arr[mid])
            return mid;
        if (val < arr[mid])
            high = mid - 1;
        else
            low = mid + 1;
    }
    printf("%d is not in array", val);
    return -1;
}

// by recursion
int interpolationSearch(int arr[], int low, int high, int val) {
    // val限制范围，防止无限递归
    if(low <= high && (val>=arr[low]) && (val <= arr[high]))
    {
        int mid;
        mid = low + (high - low) * (val - arr[low]) / (arr[high] - arr[low]);
        if(val == arr[mid])
            return mid;
        else if(val < arr[mid])
            return interpolationSearch(arr, low, mid-1, val);
        else
            return interpolationSearch(arr, mid+1, high, val);
    }
    printf("%d is not in array", val);
    return -1;

}


void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    bubbleSort(arr, n);
    printf("After sorting: ");
    showArr(arr, n);

    int val;
    printf("\nEnter the val to be searched: ");
    scanf("%d", &val);

    int result;
    result = interpolation_search(arr, 0, n-1, val);
    if(result != -1)
        printf("The pos of %d is %d", val, result);
}
}}}



===== 14.5 Jump search (can be seen as a variant of linear search) =====

Notes:  If the step size is 1, then algorithm is same as linear search

{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#include <string.h>
#include <math.h>

void readArr(int arr[], int n);
void showArr(int arr[], int n);
void bubbleSort(int arr[], int n);
int jump_search(int arr[], int low, int high, int val, int n);
void test();

int main(){
    test();
    return 0;
}

void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}

void showArr(int arr[], int n){
    for (int i = 0; i < n; ++i)
            printf("%d ", arr[i]);
    }


void bubbleSort(int arr[], int n){
    int swapped = 1, temp;
    while(swapped)
    {
        swapped = 0;
        for (int i = 0; i < n-1; ++i)
        {
            if(arr[i] > arr[i+1])
            {
                temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;
                swapped = 1;
            }
        }
        n--;
    }
}

int jump_search(int arr[], int low, int high, int val, int n){
    int step;
    step = sqrt(n);
    for (int i = 0; i < step; ++i) {
        if(val < arr[step])
            high = step - 1;
        else
            low = step + 1;
    }
    for (int i = low; i <= high; ++i) {
        if(arr[i] == val)
            return i;
    }
    printf("%d not in array", val);
    return -1;
}


void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    bubbleSort(arr, n);
    printf("After sorting: ");
    showArr(arr, n);

    int val;
    printf("\nEnter the val to be searched: ");
    scanf("%d", &val);

    int result;
    result = jump_search(arr, 0, n-1, val, n);
    if(result != -1)
        printf("The pos of %d is %d", val, result);
}
}}}


===== 14.6  Introduction to sorting =====

注意：
对于randomly accessible的data structure，像array,其random来自内存的连续性，我们可以通过外部的计算来获取特定元素的位置并获取他们。

对应的，对于sequentially accessible的data structure来说，如linked list，因为其各个node（在内存上而言）是分散存储的，所以我们不能通过外部的计算来获取其内部的元素，只能通过获取一些列的前驱节点等方式来获取特定元素的数据。


===== 14.7 BUBBLE SORT =====

{{{code: lang="c" linenumbers="True"
#include <stdio.h>

void readArr(int arr[], int n);
void showArr(int arr[], int n);
void bubbleSort(int arr[], int n);
void test();

int main(){
    test();
    return 0;
}

void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}

void showArr(int arr[], int n){
    for (int i = 0; i < n; ++i)
        printf("%d ", arr[i]);
}

void bubbleSort(int arr[], int n){
    int swapped = 1, temp;
    while(swapped)
    {
        swapped = 0;
        for (int i = 0; i < n-1; ++i)
        {
            if(arr[i] > arr[i+1])
            {
                temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;
                swapped = 1;
            }
        }
        n--;
    }
}

void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    bubbleSort(arr, n);
    printf("After sorting: ");
    showArr(arr, n);
}
}}}


===== 14.8 INSERTION SORT =====

{{{code: lang="c" linenumbers="True"
#include <stdio.h>

void readArr(int arr[], int n);
void showArr(int arr[], int n);
void insertSort(int arr[], int n);
void test();

int main(){
    test();
    return 0;
}

void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}

void showArr(int arr[], int n){
    for (int i = 0; i < n; ++i)
        printf("%d ", arr[i]);
}

void insertSort(int arr[], int n){
    int i, j, temp;
    for(i = 0; i<n; i++)
    {
        temp = arr[i];
        j = i-1;
        // 将新的元素temp，在已排好的列表中，从后向前依次比较，并依次向后移动各个元素
        // 直至temp >= arr[j]时，停止比较，置arr[j+1] = temp;
        while ((j>=0) && (temp < arr[j]))
        {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = temp;
    }
}

void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    insertSort(arr, n);
    printf("After sorting: ");
    showArr(arr, n);
}
}}}


===== 14.9 SELECTION SORT =====
{{{code: lang="c" linenumbers="True"
#include <stdio.h>

void readArr(int arr[], int n);
void showArr(int arr[], int n);
void selectionSort(int arr[], int n);
int smallest(int arr[], int k, int n);
void test();

int main(){
    test();
    return 0;
}

void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}

void showArr(int arr[], int n){
    for (int i = 0; i < n; ++i)
        printf("%d ", arr[i]);
}

void selectionSort(int arr[], int n){
    int temp, pos;
    for (int i = 0; i < n; ++i) {
        temp = arr[i];
        pos = smallest(arr, i, n);
        arr[i] = arr[pos];
        arr[pos] = temp;
    }
}
int smallest(int arr[], int k, int n){
    int smallest = arr[k];
    int pos = k;
    for (int i = k+1; i < n; ++i) {
        if(arr[i] < smallest)
        {
            smallest = arr[i];
            pos = i;
        }
    }
    return pos;
}

void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    selectionSort(arr, n);
    printf("After sorting: ");
    showArr(arr, n);
}
}}}


===== 14.10 MERGE SORT =====
{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#define size 100

void readArr(int arr[], int n);
void showArr(int arr[], int n);
void merge(int arr[], int beg, int mid, int end);
void mergeSort(int *arr, int beg, int end);
void test();

int main(){
    test();
    return 0;
}

void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}

void showArr(int arr[], int n){
    for (int i = 0; i < n; ++i)
        printf("%d ", arr[i]);
}

void merge(int arr[], int beg, int mid, int end){
    printf("[In merge]beg:%d, mid:%d, end:%d\n", beg, mid, end);

    int i = beg, j = mid+1, index=beg, temp[size], k;
    while((i<=mid) && (j<=end))
    {
        if(arr[i] < arr[j])
        {
            temp[index] = arr[i];
            i++;
        }
        else
        {
            temp[index] = arr[j];
            j++;
        }
        index++;
    }
    // 右list剩余
    if(i > mid)
    {
        while (j <= end)
        {
            temp[index] = arr[j];
            j++;
            index++;
        }
    }
    // 左list剩余
    else
    {
        while (i <= mid)
        {
            temp[index] = arr[i];
            i++;
            index++;
        }
    }

    // 将temp中排列好的元素写入原列表
    for(k = beg; k < index; k++)
        arr[k] = temp[k];
}

void mergeSort(int *arr, int beg, int end)
{
    int mid;
    if(beg < end)
    {
        mid = (beg+end)/2;
        printf("beg:%d, mid:%d, end:%d\n", beg, mid, end);
        mergeSort(arr, beg, mid);
        mergeSort(arr, mid+1, end);
        merge(arr, beg, mid, end);
    }
}

void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    mergeSort(arr, 0, n-1);
    printf("After sorting: ");
    showArr(arr, n);
}
}}}

运行输出：
{{{code: lang="c" linenumbers="True"
Enter the size of the array: 5
Enter array data: 
arr[0] = 1
arr[1] = 3
arr[2] = 2
arr[3] = 5
arr[4] = 4
beg:0, mid:2, end:4
beg:0, mid:1, end:2
beg:0, mid:0, end:1
[In merge]beg:0, mid:0, end:1
[In merge]beg:0, mid:1, end:2
beg:3, mid:3, end:4
[In merge]beg:3, mid:3, end:4
[In merge]beg:0, mid:2, end:4
After sorting: 1 2 3 4 5
}}}


===== 14.11 QUICK SORT =====

{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#define size 100

void readArr(int arr[], int n);
void showArr(int arr[], int n);
int partition(int arr[], int beg, int end);
void quickSort(int arr[], int beg, int end);
void test();

int main(){
    test();
    return 0;
}

void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}

void showArr(int arr[], int n){
    for (int i = 0; i < n; ++i)
        printf("%d ", arr[i]);
}

int partition(int arr[], int beg, int end){
    int left, right, temp, loc, flag;
    loc = left = beg;
    right = end;
    while (flag != 1)
    {
        while ((arr[loc] <= arr[right]) && (loc != right))
            right--;
        if(loc == right)
            flag = 1;
        else if(arr[loc] > arr[right])
        {
            temp = arr[loc];
            arr[loc] = arr[right];
            arr[right] = temp;
            loc = right;
        }
        if(flag != 1)
        {
            while((arr[loc] >= arr[left]) && (loc != left))
                left++;
            if(loc == left)
                flag = 1;
            else if(arr[loc] < arr[left])
            {
                temp = arr[loc];
                arr[loc] = arr[left];
                arr[left] = temp;
                loc = left;
            }
        }
    }
    return loc;
}

void quickSort(int arr[], int beg, int end){
    int loc;
    if(beg < end)
    {
        loc = partition(arr, beg, end);
        quickSort(arr, beg, loc-1);
        quickSort(arr, loc+1, end);
    }
}

void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    quickSort(arr, 0, n-1);
    printf("After sorting: ");
    showArr(arr, n);
}
}}}


===== 14.12 Radix Sort =====

{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#define size 10

void readArr(int arr[], int n);
void showArr(int arr[], int n);
int largest(int arr[], int n);
void radixSort(int arr[], int n);
void test();

int main(){
    test();
    return 0;
}

void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}

void showArr(int arr[], int n){
    for (int i = 0; i < n; ++i)
        printf("%d ", arr[i]);
}

int largest(int arr[], int n){
    int large = arr[0];

    for (int i = 1; i < n; ++i) {
        if (arr[i] > large)
            large = arr[i];
    }
    return large;
}
void radixSort(int arr[], int n){
    // bucket[x][y]: x代表remainder(某一位上的数字为多少，如0)
    // y代表remainder一致的数字有几个，某尾如同为0的个数为2
    int bucket[size][size], bucket_count[size];
    int i, j, k, remainder, large, pass;
    int divisor = 1, NOP = 0;
    // 获取最大数的位数
    large = largest(arr, n);

    while (large > 0)
    {
        NOP++;
        large /= size;
    }
    for(pass = 0; pass < NOP; pass++)
    {
        // initialize the buckets
        for (i = 0; i < size; ++i)
            bucket_count[i] = 0;
        for(i = 0; i < n; i++)
        {
            remainder = (arr[i]/divisor)%size;
            bucket[remainder][bucket_count[remainder]] = arr[i];
            bucket_count[remainder] += 1;
        }

        // collect the numbers after PASS pass
        i = 0;
        for (k = 0; k < size; ++k) {
            for(j = 0; j < bucket_count[k]; j++)
            {
                arr[i] = bucket[k][j];
                i++;
            }
        }
        divisor *= size;
    }
}

void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    radixSort(arr, n);
    printf("After sorting: ");
    showArr(arr, n);
}
}}}


===== 14.13 HEAP SORT =====

{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#define MAX 10

void readArr(int arr[], int n);
void showArr(int arr[], int n);
void RestoreHeapUp(int *, int);
void RestoreHeapDown(int *, int, int);
void heapSort(int arr[], int n);
void test();

int main(){
    test();
    return 0;
}


// start at 1
void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 1; i <= n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}
// start at 1
void showArr(int arr[], int n){
    for (int i = 1; i <= n; ++i)
        printf("%d ", arr[i]);
}


void RestoreHeapUp(int *Heap, int index){
    int val = Heap[index];
    // check parent's value
    while((index > 1) && (Heap[index/2] < val))
    {
        Heap[index] = Heap[index/2];
        index /= 2;
    }
    Heap[index] = val;
}
void RestoreHeapDown(int *Heap, int index, int n){
    int val = Heap[index];
    int j = index * 2;
    while (j <= n)
    {
        // check sibling's value
        if( (j < n) && (Heap[j] < Heap[j+1]))
            j++;
        // check parent's value
        if(Heap[j] < Heap[j/2])
            break;
        Heap[j/2] = Heap[j];
        j = j*2;
    }
    Heap[j/2] = val;
}
void heapSort(int *Heap, int n){
    for (int i = 1; i <= n; ++i) {
        RestoreHeapUp(Heap, i);
    }
    int j = n;
    for (int i = 1; i <= j; ++i) {
        int temp;
        temp = Heap[1];
        Heap[1] = Heap[n];
        Heap[n] = temp;
        n = n-1;
        RestoreHeapDown(Heap, 1, n);
    }
}

void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    heapSort(arr, n);
    printf("After sorting: ");
    showArr(arr, n);
}
}}}


===== 14.14 SHELL SORT =====
书上代码有bug...
参考这里：[[https://www.geeksforgeeks.org/shellsort/|geeksforgeeks]]

{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#define MAX 10

void readArr(int arr[], int n);
void showArr(int arr[], int n);
void shellSort(int arr[], int n);
void test();

// test(No.15): 63 19 7 90 81 36 54 45 72 27 22 9 41 59 33
int main(){
    test();
    return 0;
}


void readArr(int arr[], int n){
    printf("Enter array data: \n");
    for (int i = 0; i < n; ++i) {
        printf("arr[%d] = ", i);
        scanf("%d", &arr[i]);
    }
}
void showArr(int arr[], int n){
    for (int i = 0; i < n; ++i)
        printf("%d ", arr[i]);
}

/* function to sort arr using shellSort */
void shellSort(int arr[], int n)
{
    // Start with a big gap, then reduce the gap
    for (int gap = n/2; gap > 0; gap /= 2)
    {
        // Do a gapped insertion sort for this gap size.
        // The first gap elements a[0..gap-1] are already in gapped order
        // keep adding one more element until the entire array is
        // gap sorted
        for (int i = gap; i < n; i += 1)
        {
            // add a[i] to the elements that have been gap sorted
            // save a[i] in temp and make a hole at position i
            int temp = arr[i];

            // shift earlier gap-sorted elements up until the correct
            // location for a[i] is found
            int j;
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap)
                arr[j] = arr[j - gap];

            //  put temp (the original a[i]) in its correct location
            arr[j] = temp;
        }
    }
}

void test(){
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    int arr[n];
    readArr(arr, n);

    shellSort(arr, n);
    printf("After sorting: ");
    showArr(arr, n);
}
}}}


===== 14.15 TREE SORT =====
{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#include <stdlib.h>

struct tree
{
    struct tree *left;
    int num;
    struct tree *right;
};

void insert(struct tree **, int);
void inorder(struct tree *);
void test();

int main(){
    test();
    return 0;
}

void insert(struct tree **tree_node, int num){
    if(*tree_node == NULL)
    {
        *tree_node = malloc(sizeof(struct tree));
        (*tree_node)->num = num;
        (*tree_node)->right = NULL;
        (*tree_node)->left = NULL;
    }
    else
    {
        if(num < (*tree_node)->num)
            insert(&(*tree_node)->left, num);
        else
            insert(&(*tree_node)->right, num);
    }
}

void inorder(struct tree *tree_node){
    if(tree_node != NULL)
    {
        inorder(tree_node->left);
        printf("%d ", (*tree_node).num);
        inorder(tree_node->right);
    }
}

void test(){
    struct tree *t;
    int n;
    printf("Enter the num of numbers: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d elements: ", n);
    for (int i = 0; i < n; ++i){
        scanf("%d", &arr[i]);
        insert(&t, arr[i]);
    }
    printf("The sorted array is: ");
    inorder(t);
}
}}}



