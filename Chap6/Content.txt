Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-02-03T14:20:01+08:00

====== Content ======
Created 星期六 03 二月 2018

===== 1 Single Linked Lists =====
{{{code: lang="c" linenumbers="True"
#include<stdio.h>
#include <stdlib.h>


struct node{
    int data;
    struct node *next;
};

struct node *start = NULL;
struct node *create_ll(struct node *);
struct node *display(struct node *);
struct node *insert_beg(struct node *);
struct node *insert_end(struct node *);
struct node *insert_before(struct node *);
struct node *insert_after(struct node *);
struct node *delete_beg(struct node *);
struct node *delete_end(struct node *);
struct node *delete_node(struct node *);
struct node *delete_after(struct node *);
struct node *delete_list(struct node *);
struct node *sort_list(struct node *);


int main(int argc, char *argv[]){
    int option;
    do{
        printf("\n\n ***** MAIN MENU *****");
        printf("\n 1: Create a list");
        printf("\n 2: Display the list");
        printf("\n 3: Add a node at the beginning");
        printf("\n 4: Add a node at the end");
        printf("\n 5: Add a node before a given node");
        printf("\n 6: Add a node after a given node");
        printf("\n 7: Delete a node from the beginning");
        printf("\n 8: Delete a node from the end");
        printf("\n 9: Delete a given node");
        printf("\n 10: Delete a node after a given node");
        printf("\n 11: Delete the entire list");
        printf("\n 12: Sort the list");
        printf("\n 13: EXIT");
        printf("\n\n Enter your option: ");
        scanf("%d", &option);
        switch (option)
        {
            case 1:
                start = create_ll(start);
                printf("\n LINKED LIST CREATED");
                break;
            case 2:
                start = display(start);
                break;
            case 3:
                start = insert_beg(start);
                break;
            case 4:
                start = insert_end(start);
                break;
            case 5:
                start = insert_before(start);
                break;
            case 6:
                start = insert_after(start);
                break;
            case 7:
                start = delete_beg(start);
                break;
            case 8:
                start = delete_end(start);
                break;
            case 9:
                start = delete_node(start);
                break;
            case 10:
                start = delete_after(start);
                break;
            case 11:
                start = delete_list(start);
                break;
            case 12:
                start = sort_list(start);
                break;
        }
    }while (option != 13);
    return 0;
}


struct node *create_ll(struct node *start){
    struct node *new_node, *ptr;
    int num;
    printf("\n Enter -1 to end");
    printf("\n Enter the data: ");
    scanf("%d", &num);
    while (num != -1){
        new_node = (struct node*)malloc(sizeof(struct node));
        new_node->data = num;
        if(start == NULL)
        {
            new_node->next = NULL;
            start = new_node;
        }
        else
        {
            ptr = start;
            while(ptr->next != NULL)
                ptr = ptr->next;
            ptr->next = new_node;
            new_node->next = NULL;
        }
        printf("\n Enter the data: ");
        scanf("%d", &num);
    }
    return start;
}

struct node *display(struct node *start){
    struct node *ptr = start;
    printf("\n");
    while (ptr != NULL){  // 注意是ptr还是ptr->next
        printf("\t %d", ptr->data);
        ptr = ptr->next;
    }
    return start;
}

struct node *insert_beg(struct node *start){
    int num;
    printf("\n Enter the data(insert at begin): ");
    scanf("%d", &num);
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = num;
    new_node->next = start;
    start = new_node;
    return start;
}

struct node *insert_end(struct node *start){
    int num;
    printf("\n Enter the data(insert at end): ");
    scanf("%d", &num);
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = num;
    new_node->next = NULL;
    struct node *ptr = start;
    while(ptr->next != NULL)
        ptr = ptr->next;
    ptr->next = new_node;
    return start;
}

struct node *insert_before(struct node *start){
    int num, val;
    printf("\n Enter the data: ");
    scanf("%d", &num);
    printf("\n Enter the value before which the data has to be inserted: ");
    scanf("%d", &val);
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = num;
    struct node *preptr, *ptr;
    // insert at begin
    if(start->data == val){
        start = insert_beg(start);
        return start;
    }
    ptr = start;
    while(ptr->data != val){
        preptr = ptr;
        ptr = ptr->next;
    }
    preptr->next = new_node;
    new_node->next = ptr;
    return start;
}

struct node *insert_after(struct node *start){
    int num, val;
    printf("\n Enter the data: ");
    scanf("%d", &num);
    printf("\n Enter the value after which the data has to be inserted: ");
    scanf("%d", &val);

    struct node *new_node, *preptr, *ptr;
    new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = num;
    preptr = ptr = start;
    while (preptr->data != val){
        preptr = ptr;
        ptr = ptr->next;
    }
    preptr->next = new_node;
    new_node->next = ptr;
    return start;
}

struct node *delete_beg(struct node *start){
    struct node *temp = start;
    start = start->next;
    free(temp);
    return start;
}

struct node *delete_end(struct node *start){
    struct node *preptr, *ptr;
    ptr = preptr = start;
    while (ptr->next != NULL){
        preptr = ptr;
        ptr = ptr->next;
    }
    preptr->next = NULL;
    free(ptr);
    return start;
}

struct node *delete_node(struct node *start){  // 仅仅删除第一个
    int val;
    printf("\n Enter the value of the node which has to be deleted: ");
    scanf("%d", &val);
    struct node *preptr, *ptr;
    ptr = preptr = start;
    if(ptr->data == val){  // This matters!
        start = delete_beg(start);
        return start;
    }
    else{
        while (ptr->data != val){
            preptr = ptr;
            ptr = ptr->next;
        }
        preptr->next = ptr->next;
        free(ptr);
        return start;
    }

}

struct node *delete_after(struct node *start){
    int val;
    printf("\n Enter the value of the node after which has to be deleted: ");
    scanf("%d", &val);
    struct node *preptr, *ptr;
    ptr = preptr = start;
    while (ptr->data != val){
        preptr = ptr;
        ptr = ptr->next;
    }
    preptr->next = ptr->next;
    free(ptr);
    return start;
}

struct node *delete_list(struct node *start){
    struct node *ptr;
    if(start != NULL){
        ptr = start;
        while (ptr != NULL){
            printf("\n %d is to be deleted next", ptr->data);
            start = delete_beg(ptr);
            ptr = start;
        }
    }
    return start;

}
struct node *sort_list(struct node *start){
    struct node *ptr1, *ptr2;
    int temp;
    ptr1 = start;
    while (ptr1->next != NULL){
        ptr2 = ptr1->next;
        while (ptr2 != NULL){
            if(ptr1->data > ptr2->data){
                temp = ptr1->data;
                ptr1->data = ptr2->data;
                ptr2->data = temp;
            }
            ptr2 = ptr2->next;
        }
        ptr1 = ptr1->next;
    }
    return start;
}

}}}



===== 2 Circlular Linked Lists =====

{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};


struct node *start = NULL;

struct node *createCirList(struct node *start);

struct node *insertBeg(struct node *start, int data);

struct node *insertEnd(struct node *start, int data);

struct node *deleteBeg(struct node *start);

struct node *deleteEnd(struct node *start);

struct node *deleteNode(struct node *start, int data);

struct node *deleteCirList(struct node *start);

void showCirList(struct node *start);

void runTest();


int main() {
    runTest();
    
    return 0;
}

struct node *createCirList(struct node *start) {
    struct node *new_node;
    printf("Enter data: ");
    int num;
    scanf("%d", &num);
    while (num != -1) {
        new_node = (struct node *) malloc(sizeof(struct node));
        new_node->data = num;
        if (start == NULL) {
            start = new_node;
            new_node->next = start;
        } else
            start = insertEnd(start, num);
        printf("Enter data: ");
        scanf("%d", &num);
    }
    return start;
}

void showCirList(struct node *start) {
    if (start == NULL) {
        printf("Empty List!");
        return;
    }
    struct node *ptr;
    ptr = start;
    // 这里注意要先打印第一个数据
    printf("%d ", ptr->data);
    ptr = ptr->next;
    // 这里注意是ptr而非ptr->next
    while (ptr != start) {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }
    printf("\n");
}

struct node *insertBeg(struct node *start, int data) {
    struct node *new_node;
    new_node = (struct node *) malloc(sizeof(struct node));
    new_node->data = data;
    if (start == NULL) {
        start = new_node;
        new_node->next = start;
    } else {
        struct node *ptr = start;
        while (ptr->next != start)
            ptr = ptr->next;
        ptr->next = new_node;
        new_node->next = start;
        start = new_node;
    }
    return start;
}

struct node *insertEnd(struct node *start, int data) {
    struct node *new_node;
    new_node = (struct node *) malloc(sizeof(struct node));
    new_node->data = data;
    if (start == NULL) {
        start = new_node;
        new_node->next = start;
    } else {
        struct node *ptr = start;
        while (ptr->next != start)
            ptr = ptr->next;
        ptr->next = new_node;
        new_node->next = start;
    }
    return start;
}

struct node *deleteBeg(struct node *start) {
    // if have no node
    if (start == NULL) {
        printf("Empty already!");
        return start;
    }
    // 如果只有一个node
    if (start->next == start) {
        free(start);
        start = NULL;
    } else {
        struct node *ptr = start;
        while (ptr->next != start)
            ptr = ptr->next;
        ptr->next = start->next;
        struct node *temp = start;
        start = start->next;
        free(temp);
    }
    return start;
}

struct node *deleteEnd(struct node *start) {
    // if have no node
    if (start == NULL) {
        printf("Empty already!");
        return start;
    }

    // if only one node
    if (start->next == start) {
        free(start);
        start = NULL;
    } else {
        struct node *preptr, *ptr;
        ptr = start;
        while (ptr->next != start) {
            preptr = ptr;
            ptr = ptr->next;
        }
        preptr->next = start;
        free(ptr);
    }

    return start;
}

struct node *deleteNode(struct node *start, int data) {
    // if have no node
    if (start == NULL) {
        printf("Empty already!");
        return start;
    }

    // if only one node
    if (start->data == data && start->next == start) {
        free(start);
        start = NULL;
    } else {
        struct node *preptr, *ptr;
        ptr = start;
        while (ptr->data != data) {
            preptr = ptr;
            ptr = ptr->next;
        }
        preptr->next = ptr->next;
        free(ptr);
    }
    return start;
}

struct node *deleteCirList(struct node *start) {
    while (start != NULL) {
        start = deleteEnd(start);
    }
    return start;
}

void runTest() {
    int data;
    int option;
    do {
        printf("\n\n *****MAIN MENU *****");
        printf("\n 1: Create a list");
        printf("\n 2: Display the list");
        printf("\n 3: Add a node at the beginning");
        printf("\n 4: Add a node at the end");
        printf("\n 5: Delete a node from the beginning");
        printf("\n 6: Delete a node from the end");
        printf("\n 7: Delete a node with data");
        printf("\n 8: Delete the entire list");
        printf("\n -1: EXIT");
        printf("\n\n Enter your option : ");
        scanf("%d", &option);
        switch (option) {
            case 1:
                start = createCirList(start);
                break;
            case 2:
                showCirList(start);
                break;
            case 3:
                printf("Enter the data: ");
                scanf("%d", &data);
                start = insertBeg(start, data);
                break;
            case 4:
                printf("Enter the data: ");
                scanf("%d", &data);
                start = insertEnd(start, data);
                break;
            case 5:
                start = deleteBeg(start);
                break;
            case 6:
                start = deleteEnd(start);
                break;
            case 7:
                printf("Enter data: ");
                scanf("%d", &data);
                start = deleteNode(start, data);
                break;
            case 8:
                start = deleteCirList(start);
                break;
        }

    } while (option != -1);
}
}}}


