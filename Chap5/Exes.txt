Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-31T16:14:06+08:00

====== Exes ======
Created 星期三 31 一月 2018

===== 1 =====
Declare a structure that represents the following
hierarchical information.
	
 (a)	 Student
	
 (b)	 Roll Number
	
 (c)	 Name
	
 (i)	 First name
	
 (ii)	 Middle Name
	
 (iii)	 Last Name
	
 (d)	 Sex
	
 (e)	 Date of Birth
	
 (i)	 Day
	
 (ii)	 Month
	
 (iii)	 Year
	
 (f)	 Marks
 (i)	English
	
 (ii)	 Mathematics
	
 (iii)	 Computer Science

{{{code: lang="c" linenumbers="True"
#include <stdio.h>

struct Name {
    char firstName[10];
    char middleName[10];
    char lastName[10];
};

struct BirthDay {
    int day;
    int month;
    int year;
};

struct Marks {
    float english;
    float math;
    float cs;
};

struct student {
    int rollNum;
    struct Name name;
    int sex;
    struct BirthDay birthDay;
    struct Marks marks;
};

void readData(struct student *student1);

void showData(struct student *student1);


int main() {
    struct student student1;
    readData(&student1);
    showData(&student1);

    return 0;
}

void readData(struct student *student1) {
    printf("Enter student data: ");
    char temp[100];
    fgets(temp, 100, stdin);
    sscanf(temp, "%d %s %s %s %d %d %d %d %f %f %f",
           &student1->rollNum,
           student1->name.firstName, student1->name.middleName, student1->name.lastName,
           &student1->sex, &student1->birthDay.day, &student1->birthDay.month, &student1->birthDay.year,
           &student1->marks.english, &student1->marks.math, &student1->marks.cs);
}

void showData(struct student *student1) {
    printf("Student data: \n");
    printf("%d %s %s %s %d %d %d %d %f %f %f",
           student1->rollNum,
           student1->name.firstName, student1->name.middleName, student1->name.lastName,
           student1->sex, student1->birthDay.day, student1->birthDay.month, student1->birthDay.year,
           student1->marks.english, student1->marks.math, student1->marks.cs);
}
}}}


===== 2 =====

注意：
int (*ptr)[10];  → a pointer to an array of 10 int
int *ptr[10]; →  an array of 10 int* pointers
reference: https://stackoverflow.com/questions/13910749/difference-between-ptr10-and-ptr10

 Define a structure to store the name, an array
marks[] which stores the marks of three different
subjects, and a character grade. Write a program
to display the details of the student whose name
is entered by the user. Use the structure definition
of the first question to make an array of students.
Display the name of the students who have secured
less than 40% of the aggregate.

最后一句没看懂...

注意：这里students作为函数的参数在传递的时候是和之前写的int的array是一样的。
{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#include <string.h>

struct Name {
    char firstName[10];
    char middleName[10];
    char lastName[10];
};

struct BirthDay {
    int day;
    int month;
    int year;
};

struct Marks {
    float english;
    float math;
    float cs;
};

struct student {
    int rollNum;
    struct Name name;
    int sex;
    struct BirthDay birthDay;
    struct Marks marks;
};

void readData(struct student *student1);

void showData(struct student *student1);

void getSbInfo(struct Name someBody, int n, struct student students[n]);

int sameName(struct Name someBody, struct student *student1);

// test data
// 10 F1 M1 L1 0 1 6 1997 100 100 90
// 11 F2 M2 L2 1 2 6 1997 100 100 99
int main() {
    int n;
    n = 2;
    struct student students[n];
    for (int i = 0; i < n; ++i) {
        readData(&students[i]);
    }
    struct Name someBody;
    printf("Enter the full name: ");
    char temp[30];
    fgets(temp, 30, stdin);
    sscanf(temp, "%s %s %s", someBody.firstName, someBody.middleName, someBody.lastName);
    getSbInfo(someBody, n, students);

    return 0;
}

void readData(struct student *student1) {
    printf("Enter student data: ");
    char temp[100];
    fgets(temp, 100, stdin);
    sscanf(temp, "%d %s %s %s %d %d %d %d %f %f %f",
           &student1->rollNum,
           student1->name.firstName, student1->name.middleName, student1->name.lastName,
           &student1->sex, &student1->birthDay.day, &student1->birthDay.month, &student1->birthDay.year,
           &student1->marks.english, &student1->marks.math, &student1->marks.cs);
}

void showData(struct student *student1) {
    printf("Student data: \n");
    printf("%d %s %s %s %d %d %d %d %.2f %.2f %.2f",
           student1->rollNum,
           student1->name.firstName, student1->name.middleName, student1->name.lastName,
           student1->sex, student1->birthDay.day, student1->birthDay.month, student1->birthDay.year,
           student1->marks.english, student1->marks.math, student1->marks.cs);
}


void getSbInfo(struct Name someBody, int n, struct student students[n]) {
    for (int j = 0; j < n; ++j) {
        if (sameName(someBody, &students[j])) {
            showData(&students[j]);
            break;
        }
    }
}

int sameName(struct Name someBody, struct student *student1) {
    if (strcmp(someBody.firstName, student1->name.firstName) != 0) return 0;
    if (strcmp(someBody.middleName, student1->name.middleName) != 0) return 0;
    if (strcmp(someBody.lastName, student1->name.lastName) != 0) return 0;

    return 1;
}
}}}



===== 3 =====
Modify Question 2 to print each student’s average
marks and the class average (that includes average
of all the student’s marks).

{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#include <string.h>

struct Name {
    char firstName[10];
    char middleName[10];
    char lastName[10];
};

struct BirthDay {
    int day;
    int month;
    int year;
};

struct Marks {
    float english;
    float math;
    float cs;
};

struct student {
    int rollNum;
    struct Name name;
    int sex;
    struct BirthDay birthDay;
    struct Marks marks;
};

void readData(struct student *student1);

void showData(struct student *student1);

float getStudAvgMark(struct student *student1);

float getClassAvgMark(int n, struct student students[n]);

// test data
// 10 F1 M1 L1 0 1 6 1997 100 100 90
// 11 F2 M2 L2 1 2 6 1997 100 100 99
int main() {
    int n;
    n = 2;
    struct student students[n];
    for (int i = 0; i < n; ++i) {
        readData(&students[i]);
    }

    float avg1;
    avg1 = getStudAvgMark(&students[0]);
    printf("Avg Marks of the first one: %.2f\n", avg1);

    float avg11;
    avg11 = getStudAvgMark(&students[1]);
    printf("Avg Marks of the snd one: %.2f\n", avg11);

    float avg2;
    avg2 = getClassAvgMark(n, students);
    printf("Avg Marks of the class: %.2f", avg2);

    return 0;
}

void readData(struct student *student1) {
    printf("Enter student data: ");
    char temp[100];
    fgets(temp, 100, stdin);
    sscanf(temp, "%d %s %s %s %d %d %d %d %f %f %f",
           &student1->rollNum,
           student1->name.firstName, student1->name.middleName, student1->name.lastName,
           &student1->sex, &student1->birthDay.day, &student1->birthDay.month, &student1->birthDay.year,
           &student1->marks.english, &student1->marks.math, &student1->marks.cs);
}

void showData(struct student *student1) {
    printf("Student data: \n");
    printf("%d %s %s %s %d %d %d %d %.2f %.2f %.2f",
           student1->rollNum,
           student1->name.firstName, student1->name.middleName, student1->name.lastName,
           student1->sex, student1->birthDay.day, student1->birthDay.month, student1->birthDay.year,
           student1->marks.english, student1->marks.math, student1->marks.cs);
}


float getStudAvgMark(struct student *student1) {
    float avg = 0;
    avg = avg + student1->marks.english +
          student1->marks.math +
          student1->marks.cs;
    return avg / 3;
}

float getClassAvgMark(int n, struct student students[n]) {
    float avg = 0;
    for (int i = 0; i < n; ++i) {
        avg += getStudAvgMark(&students[i]);
    }
    return avg / n;
}
}}}


===== 4 =====

 Make an array of students as illustrated in Question 1
and write a program to display the details of the
student with the given Date of Birth.

与之前按照名字查找信息是一致的。

{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#include <string.h>

struct Name {
    char firstName[10];
    char middleName[10];
    char lastName[10];
};

struct BirthDay {
    int day;
    int month;
    int year;
};

struct Marks {
    float english;
    float math;
    float cs;
};

struct student {
    int rollNum;
    struct Name name;
    int sex;
    struct BirthDay birthDay;
    struct Marks marks;
};

void readData(struct student *student1);

void showData(struct student *student1);

int sameBirth(struct BirthDay birthDay, struct student student1);

void getBirthData(struct BirthDay birthDay, int n, struct student students[n]);


// test data
// 10 F1 M1 L1 0 1 6 1997 100 100 90
// 11 F2 M2 L2 1 2 6 1997 100 100 99
int main() {
    int n;
    n = 2;
    struct student students[n];
    for (int i = 0; i < n; ++i) {
        readData(&students[i]);
    }

    struct BirthDay birthDay;
    char temp[30];
    printf("Enter birth data(day mon year): ");
    fgets(temp, 30, stdin);
    sscanf(temp, "%d %d %d", &birthDay.day, &birthDay.month, &birthDay.year);
    getBirthData(birthDay, n, students);

    return 0;
}

void readData(struct student *student1) {
    printf("Enter student data: ");
    char temp[100];
    fgets(temp, 100, stdin);
    sscanf(temp, "%d %s %s %s %d %d %d %d %f %f %f",
           &student1->rollNum,
           student1->name.firstName, student1->name.middleName, student1->name.lastName,
           &student1->sex, &student1->birthDay.day, &student1->birthDay.month, &student1->birthDay.year,
           &student1->marks.english, &student1->marks.math, &student1->marks.cs);
}

void showData(struct student *student1) {
    printf("Student data: \n");
    printf("%d %s %s %s %d %d %d %d %.2f %.2f %.2f",
           student1->rollNum,
           student1->name.firstName, student1->name.middleName, student1->name.lastName,
           student1->sex, student1->birthDay.day, student1->birthDay.month, student1->birthDay.year,
           student1->marks.english, student1->marks.math, student1->marks.cs);
}

int sameBirth(struct BirthDay birthDay, struct student student1) {
    if (birthDay.day != student1.birthDay.day || birthDay.month != student1.birthDay.month
        || birthDay.year != student1.birthDay.year)
        return 0;
    return 1;
}

void getBirthData(struct BirthDay birthDay, int n, struct student students[n]) {
    for (int i = 0; i < n; ++i) {
        if (sameBirth(birthDay, students[i]))
            showData(&students[i]);
    }
}

}}}



===== 5 =====
Write a program to find smallest of three numbers
using structures.



===== 6 =====
 Write a program to calculate the distance between
the given points (6,3) and (2,2).

{{{code: lang="c" linenumbers="True"
#include <stdio.h>
#include <math.h>

typedef struct point {
    int x;
    int y;
} POINT;

double getDistance(POINT p1, POINT p2);

int main() {
    POINT p1 = {6, 3};
    POINT p2 = {2, 2};
    double distance;
    distance = getDistance(p1, p2);
    printf("The distance between p1 and p2: %f", distance);

    return 0;
}

double getDistance(POINT p1, POINT p2) {
    double distance;
    distance = sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
    return distance;
}
}}}



===== 8 =====
Write a program to add and subtract height 6'2"
and 5'4".

{{{code: lang="c" linenumbers="True"
#include <stdio.h>

typedef struct ft {
    int f;
    int s;
} FT;

FT subFt(FT ft1, FT ft2);

FT addFt(FT ft1, FT ft2);

void showFt(FT ft);

int main() {
    FT ft1 = {6, 2};
    FT ft2 = {5, 4};
    FT ft3;
    ft3 = subFt(ft1, ft2);
    showFt(ft3);

    ft3 = addFt(ft1, ft2);
    showFt(ft3);

    return 0;
}

FT subFt(FT ft1, FT ft2) {
    FT ft;
    if (ft1.f > ft2.f) {
        ft.f = ft1.f - ft2.f;
        ft.s = ft1.s - ft2.s;
    } else {
        ft.f = ft2.f - ft1.f;
        ft.s = ft2.s - ft1.s;
    }
    if (ft.s < 0) {
        ft.f -= 1;
        ft.s += 12;
    }
    return ft;
}

FT addFt(FT ft1, FT ft2) {
    FT ft;
    ft.f = ft1.f + ft2.f;
    ft.s = ft1.s + ft2.s;
    if (ft.s >= 12) {
        ft.f += 1;
        ft.s -= 12;
    }
    return ft;
}

void showFt(FT ft) {
    printf("%d'%d''\n", ft.f, ft.s);
}

}}}


===== 9 =====
Write a program to add and subtract 10hrs 20mins
50sec and 5hrs 30min 40sec.

{{{code: lang="c" linenumbers="True"
#include <stdio.h>

typedef struct time {
    int hour;
    int minute;
    int sec;
} TIME;

TIME addTime(TIME t1, TIME t2);

TIME subTime(TIME t1, TIME t2);

void showTime(TIME t);

int main() {
    TIME t1 = {10, 20, 50};
    TIME t2 = {5, 30, 40};
    TIME t3;
    t3 = addTime(t1, t2);
    showTime(t3);

    t3 = subTime(t1, t2);
    showTime(t3);

    return 0;
}

TIME addTime(TIME t1, TIME t2) {
    TIME t;
    t.sec = t1.sec + t2.sec;
    t.minute = t1.minute + t2.minute;
    t.hour = t1.hour + t2.hour;
    if (t.sec >= 60) {
        t.sec -= 60;
        t.minute += 1;
    }
    if (t.minute >= 60) {
        t.minute -= 60;
        t.hour += 1;
    }
    return t;
}

TIME subTime(TIME t1, TIME t2) {
    TIME t;
    if (t1.hour * 3600 + t1.minute * 60 + t1.sec
        > t2.hour * 3600 + t2.minute * 60 + t2.sec) {
        t.sec = t1.sec - t2.sec;
        t.minute = t1.minute - t2.minute;
        t.hour = t1.hour - t2.hour;
    } else {
        t.sec = t2.sec - t1.sec;
        t.minute = t2.minute - t1.minute;
        t.hour = t2.hour - t1.hour;
    }
    if (t.sec < 0) {
        t.sec += 60;
        t.minute -= 1;
    }
    if (t.minute < 0) {
        t.minute += 60;
        t.hour -= 1;
    }
    return t;
}

void showTime(TIME t) {
    printf("%dh%dm%ds\n", t.hour, t.minute, t.sec);
}
}}}


===== 11 =====


